import sys
import itertools


#def intcode_v3(phase):
#    a = [3,8,1001,8,10,8,105,1,0,0,21,38,63,88,97,118,199,280,361,442,99999,3,9,1002,9,3,9,101,2,9,9,1002,9,4,9,4,9,99,3,9,101,3,9,9,102,5,9,9,101,3,9,9,1002,9,3,9,101,3,9,9,4,9,99,3,9,1002,9,2,9,1001,9,3,9,102,3,9,9,101,2,9,9,1002,9,4,9,4,9,99,3,9,102,2,9,9,4,9,99,3,9,102,4,9,9,101,5,9,9,102,2,9,9,101,5,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,99]
#    i = 0
#    while a[i]!=99:
#        if a[i] % 100 == 1:
#            f = a[i] // 100 % 10
#            s = a[i] // 1000 % 10
#
#            f = (not f) * int(a[abs(int(a[i+1])) % len(a)]) + f * int(a[i + 1])
#            s = (not s) * int(a[abs(int(a[i+2])) % len(a)]) + s * int(a[i + 2])
#
#            a[a[i+3]] = f + s
#            i = i+4
#        elif a[i] % 100 == 2:
#            f = a[i] // 100 % 10
#            s = a[i] // 1000 % 10
#
#            f = (not f) * int(a[abs(int(a[i+1])) % len(a)]) + f * int(a[i + 1])
#            s = (not s) * int(a[abs(int(a[i+2])) % len(a)]) + s * int(a[i + 2])
#
#            a[a[i+3]] = f * s
#            i = i+4
#
#        elif a[i] % 100 == 3:
#            t = a[i] // 100 % 10
#            a[a[i+1]] = phase.pop(0)
#            i = i+2
#        elif a[i] % 100 == 4:
#            t = a[i] // 100 % 10
#            if t:
#                #print(a[i+1])
#                return a[i+1]
#            else:
#                #print(a[a[i+1]])
#                return a[a[i+1]]
#            i = i+2
#        elif a[i] % 100 == 5:
#            f = a[i] // 100 % 10
#            s = a[i] // 1000 % 10
#
#            f = (not f) * int(a[abs(int(a[i+1])) % len(a)]) + f * int(a[i + 1])
#            s = (not s) * int(a[abs(int(a[i+2])) % len(a)]) + s * int(a[i + 2])
#
#            if f != 0:
#                i = s
#            else:
#                i = i+3
#        elif a[i] % 100 == 6:
#            f = a[i] // 100 % 10
#            s = a[i] // 1000 % 10
#
#            f = (not f) * int(a[abs(int(a[i+1])) % len(a)]) + f * int(a[i + 1])
#            s = (not s) * int(a[abs(int(a[i+2])) % len(a)]) + s * int(a[i + 2])
#
#            if f == 0:
#                i = s
#            else:
#                i = i+3
#
#        elif a[i] % 100 == 7:
#            f = a[i] // 100 % 10
#            s = a[i] // 1000 % 10
#            t = a[i] // 10000 % 10
#
#            f = (not f) * int(a[abs(int(a[i+1])) % len(a)]) + f * int(a[i + 1])
#            s = (not s) * int(a[abs(int(a[i+2])) % len(a)]) + s * int(a[i + 2])
#            t = (not t) * int(a[abs(int(a[i+3])) % len(a)]) + t * int(a[i + 3])
#
#            if f < s:
#                a[a[i+3]] = 1
#            else:
#                a[a[i+3]] = 0
#            i = i+4
#        elif a[i] % 100 == 8:
#            f = a[i] // 100 % 10
#            s = a[i] // 1000 % 10
#            t = a[i] // 10000 % 10
#
#            f = (not f) * int(a[abs(int(a[i+1])) % len(a)]) + f * int(a[i + 1])
#            s = (not s) * int(a[abs(int(a[i+2])) % len(a)]) + s * int(a[i + 2])
#            t = (not t) * int(a[abs(int(a[i+3])) % len(a)]) + t * int(a[i + 3])
#
#            if f == s:
#                a[a[i+3]] = 1
#            else:
#                a[a[i+3]] = 0
#            i = i+4

def get_val(a, pos, mode, rel=None):
    if mode == 0:
        return a[a[pos]]
    elif mode == 1:
        return a[pos]
    elif mode ==2:
        return a[a[pos] + rel]

def set_val(a, pos, mode, val, rel=None):
    if mode == 0:
       a[a[pos]] = val
    elif mode == 1:
       a[pos] = val
    if mode == 2:
       a[a[pos] + rel] = val


def intcode_v3(a=None, init=None):
    a = [3,8,1001,8,10,8,105,1,0,0,21,38,63,88,97,118,199,280,361,442,99999,3,9,1002,9,3,9,101,2,9,9,1002,9,4,9,4,9,99,3,9,101,3,9,9,102,5,9,9,101,3,9,9,1002,9,3,9,101,3,9,9,4,9,99,3,9,1002,9,2,9,1001,9,3,9,102,3,9,9,101,2,9,9,1002,9,4,9,4,9,99,3,9,102,2,9,9,4,9,99,3,9,102,4,9,9,101,5,9,9,102,2,9,9,101,5,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,99]
    i = 0
    rel_base = 0
    while a[i]!=99:
        if a[i] % 100 == 1:
            f = a[i] // 100 % 10
            s = a[i] // 1000 % 10
            t = a[i] // 10000 % 10

            f = get_val(a, i+1, f, rel_base)
            s = get_val(a, i+2, s, rel_base)

            set_val(a, i+3, t, val=f + s, rel=rel_base)
            i = i+4
        elif a[i] % 100 == 2:
            f = a[i] // 100 % 10
            s = a[i] // 1000 % 10
            t = a[i] // 10000 % 10

            f = get_val(a, i+1, f, rel_base)
            s = get_val(a, i+2, s, rel_base)

            set_val(a, i+3, t, f * s, rel=rel_base)

            i = i+4

        elif a[i] % 100 == 3:
            t = a[i] // 100 % 10
            set_val(a, i+1, t, val=init.pop(0), rel=rel_base)
            i += 2
        elif a[i] % 100 == 4:
            t = a[i] // 100 % 10
            #print(get_val(a, i+1, t, rel_base))
            return (get_val(a, i+1, t, rel_base))
            i = i+2

        elif a[i] % 100 == 5:
            f = a[i] // 100 % 10
            s = a[i] // 1000 % 10

            f = get_val(a, i+1, f, rel_base)
            s = get_val(a, i+2, s, rel_base)

            if f != 0:
                i = s
            else:
                i = i+3

        elif a[i] % 100 == 6:
            f = a[i] // 100 % 10
            s = a[i] // 1000 % 10

            f = get_val(a, i+1, f, rel_base)
            s = get_val(a, i+2, s, rel_base)

            if f == 0:
                i = s
            else:
                i = i+3

        elif a[i] % 100 == 7:
            f = a[i] // 100 % 10
            s = a[i] // 1000 % 10
            t = a[i] // 10000 % 10

            f = get_val(a, i+1, f, rel_base)
            s = get_val(a, i+2, s, rel_base)

            if f < s:
               # a[a[i+3] + offset_t] = 1
                set_val(a, i+3, t, 1, rel=rel_base)
            else:
                #a[a[i+3] + offset_t] = 0
                set_val(a, i+3, t, 0, rel=rel_base)
            i += 4
        elif a[i] % 100 == 8:
            f = a[i] // 100 % 10
            s = a[i] // 1000 % 10
            t = a[i] // 10000 % 10

            f = get_val(a, i+1, f, rel_base)
            s = get_val(a, i+2, s, rel_base)

            if f == s:
#                a[a[i+3] + offset_t] = 1
                set_val(a, i+3, t, 1, rel=rel_base)
            else:
#               a[a[i+3] + offset_t] = 0
                set_val(a, i+3, t, 0, rel=rel_base)
            i += 4

        elif a[i] % 100 == 9:
            f = a[i] // 100 % 10
            f = get_val(a, i+1, f, rel_base)

            rel_base += f
            i += 2
    sys.exit(0)


a = [3,8,1001,8,10,8,105,1,0,0,21,38,63,88,97,118,199,280,361,442,99999,3,9,1002,9,3,9,101,2,9,9,1002,9,4,9,4,9,99,3,9,101,3,9,9,102,5,9,9,101,3,9,9,1002,9,3,9,101,3,9,9,4,9,99,3,9,1002,9,2,9,1001,9,3,9,102,3,9,9,101,2,9,9,1002,9,4,9,4,9,99,3,9,102,2,9,9,4,9,99,3,9,102,4,9,9,101,5,9,9,102,2,9,9,101,5,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,99]

saves = [None] * 5
for i in range(5):
    saves[i] = list(a)


max_output = 0
permutations = (list(itertools.permutations([1, 2, 3, 4, 0])))
permutations_bis= (list(itertools.permutations([5,6,7,8,9])))

for perm in permutations_bis:
    last_output = 0
    for i in range(len(perm)):
        last_output = intcode_v3(a=saves[i], init = [perm[i], last_output])
        print(last_output)

    while last_output != 99:
        for i in range(len(perm)):
            last_output = intcode_v3(a=saves[i], init = [last_output])
            print(last_output)

    if max_output < last_output:
        max_output = last_output

print(max_output)
